{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["// January 2019 Big Mac Index\n\nconst fetch = require(\"isomorphic-fetch\");\n\nexport const BigMacIndex = {\n    Switzerland: 6.62,\n    Norway: 5.86,\n    Sweden: 5.84,\n    \"United States\": 5.58,\n    Canada: 5.08,\n    \"Euro area\": 4.64,\n    Denmark: 4.6,\n    Israel: 4.58,\n    Brazil: 4.55,\n    Australia: 4.35,\n    Lebanon: 4.31,\n    Uruguay: 4.31,\n    Singapore: 4.28,\n    \"New Zealand\": 4.19,\n    Britain: 4.07,\n    \"South Korea\": 4.02,\n    Chile: 3.89,\n    \"United Arab Emirates\": 3.81,\n    \"Czech Republic\": 3.81,\n    \"Costa Rica\": 3.77,\n    Colombia: 3.73,\n    Thailand: 3.72,\n    Japan: 3.6,\n    Honduras: 3.49,\n    Kuwait: 3.46,\n    Pakistan: 3.31,\n    Qatar: 3.3,\n    Croatia: 3.24,\n    Guatemala: 3.23,\n    \"Saudi Arabia\": 3.2,\n    Bahrain: 3.18,\n    Nicaragua: 3.18,\n    \"Sri Lanka\": 3.18,\n    Peru: 3.14,\n    China: 3.05,\n    Hungary: 3.03,\n    Vietnam: 2.8,\n    Poland: 2.8,\n    Jordan: 2.75,\n    Oman: 2.73,\n    Philippines: 2.67,\n    India: 2.55,\n    \"Hong Kong\": 2.55,\n    Mexico: 2.54,\n    Indonesia: 2.34,\n    Azerbaijan: 2.33,\n    Moldova: 2.32,\n    Romania: 2.29,\n    Taiwan: 2.24,\n    \"South Africa\": 2.24,\n    Egypt: 2.23,\n    Malaysia: 2.2,\n    Argentina: 2,\n    Turkey: 2,\n    Ukraine: 1.94,\n    Russia: 1.65\n};\n\nexport class ParityPrice {\n    ipstack_key: string;\n    cache: { [key: string]: any };\n    enableSSL: boolean;\n\n    constructor(ipstack_key: string, enable_ssl: boolean = false) {\n        this.ipstack_key = ipstack_key;\n        this.cache = {};\n        this.enableSSL = enable_ssl;\n    }\n\n    private async ipstack(IP?: string) {\n        const param = IP ? IP : \"check\";\n\n        if (!this.cache[param]) {\n            const res = await fetch(\n                `http${\n                    this.enableSSL ? \"s\" : \"\"\n                }://api.ipstack.com/${param}?access_key=${this.ipstack_key}`\n            );\n            this.cache[param] = await res.json();\n        }\n\n        return this.cache[param];\n    }\n\n    private _price(USAprice: number, location: any): number {\n        const pricePerBurger = USAprice / BigMacIndex[\"United States\"];\n\n        let fairPrice = USAprice;\n\n        if (location.country_name in BigMacIndex) {\n            fairPrice = Math.round(\n                pricePerBurger * BigMacIndex[location.country_name]\n            );\n        } else if (location.continent_code === \"EU\") {\n            fairPrice = Math.round(pricePerBurger * BigMacIndex[\"Euro area\"]);\n        } else if (location.continent_code === \"AS\") {\n            fairPrice = Math.round(pricePerBurger * BigMacIndex[\"Vietnam\"]);\n        } else if (location.continent_code === \"AF\") {\n            fairPrice = Math.round(pricePerBurger * BigMacIndex[\"Egypt\"]);\n        } else if (location.continent_code === \"SA\") {\n            fairPrice = Math.round(pricePerBurger * BigMacIndex[\"Brazil\"]);\n        }\n\n        return fairPrice;\n    }\n\n    async price(USAprice: number, IP?: string): Promise<number> {\n        const location = await this.ipstack(IP);\n        const fairPrice = this._price(USAprice, location);\n\n        return fairPrice;\n    }\n\n    async priceWithLocation(\n        USAprice: number,\n        IP?: string\n    ): Promise<{ fairPrice: number; location: any }> {\n        const location = await this.ipstack(IP);\n\n        const fairPrice = this._price(USAprice, location);\n\n        return { fairPrice, location: location };\n    }\n}\n"],"names":["const","fetch","require","BigMacIndex","Switzerland","Norway","Sweden","Canada","Denmark","Israel","Brazil","Australia","Lebanon","Uruguay","Singapore","Britain","Chile","Colombia","Thailand","Japan","Honduras","Kuwait","Pakistan","Qatar","Croatia","Guatemala","Bahrain","Nicaragua","Peru","China","Hungary","Vietnam","Poland","Jordan","Oman","Philippines","India","Mexico","Indonesia","Azerbaijan","Moldova","Romania","Taiwan","Egypt","Malaysia","Argentina","Turkey","Ukraine","Russia","ParityPrice","constructor","ipstack_key","enable_ssl","cache","enableSSL","ipstack","IP","this","_this","param","res","json","_price","USAprice","location","pricePerBurger","fairPrice","country_name","Math","round","continent_code","price","_this2","priceWithLocation","_this3"],"mappings":"gMAEAA,IAAMC,EAAQC,QAAQ,oBAETC,EAAc,CACvBC,YAAa,KACbC,OAAQ,KACRC,OAAQ,qBACS,KACjBC,OAAQ,iBACK,KACbC,QAAS,IACTC,OAAQ,KACRC,OAAQ,KACRC,UAAW,KACXC,QAAS,KACTC,QAAS,KACTC,UAAW,mBACI,KACfC,QAAS,mBACM,KACfC,MAAO,4BACiB,sBACN,kBACJ,KACdC,SAAU,KACVC,SAAU,KACVC,MAAO,IACPC,SAAU,KACVC,OAAQ,KACRC,SAAU,KACVC,MAAO,IACPC,QAAS,KACTC,UAAW,oBACK,IAChBC,QAAS,KACTC,UAAW,iBACE,KACbC,KAAM,KACNC,MAAO,KACPC,QAAS,KACTC,QAAS,IACTC,OAAQ,IACRC,OAAQ,KACRC,KAAM,KACNC,YAAa,KACbC,MAAO,iBACM,KACbC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,oBACQ,KAChBC,MAAO,KACPC,SAAU,IACVC,UAAW,EACXC,OAAQ,EACRC,QAAS,KACTC,OAAQ,MAGCC,EAKTC,SAAYC,EAAqBC,mBAAsB,QAC9CD,YAAcA,OACdE,MAAQ,QACRC,UAAYF,GAGPG,YAAAA,iBAAQC,aAGbC,yBASEC,EAAKL,MAAMM,OAXZA,EAAQH,GAAU,yBAEnBE,EAAKL,MAAMM,0BACM1D,UAEVyD,EAAKJ,UAAY,IAAM,0BACLK,iBAAoBD,8BAHxCE,0BAKoBA,EAAIC,2BAAzBR,MAAMM,+EAMXG,YAAAA,gBAAOC,EAAkBC,OACvBC,EAAiBF,EAAW5D,EAAY,iBAE1C+D,EAAYH,SAEZC,EAASG,gBAAgBhE,EACzB+D,EAAYE,KAAKC,MACbJ,EAAiB9D,EAAY6D,EAASG,eAEP,OAA5BH,EAASM,eAChBJ,EAAYE,KAAKC,MAAMJ,EAAiB9D,EAAY,cACjB,OAA5B6D,EAASM,eAChBJ,EAAYE,KAAKC,MAAMJ,EAAiB9D,EAAW,SAChB,OAA5B6D,EAASM,eAChBJ,EAAYE,KAAKC,MAAMJ,EAAiB9D,EAAW,OAChB,OAA5B6D,EAASM,iBAChBJ,EAAYE,KAAKC,MAAMJ,EAAiB9D,EAAW,SAGhD+D,GAGLK,YAAAA,eAAMR,EAAkBP,aACHC,4BAAAe,EAAKjB,QAAQC,kBAA9BQ,UACYQ,EAAKV,OAAOC,EAAUC,yCAKtCS,YAAAA,2BACFV,EACAP,aAEuBC,4BAAAiB,EAAKnB,QAAQC,kBAA9BQ,SAIC,WAFWU,EAAKZ,OAAOC,EAAUC,YAEVA"}