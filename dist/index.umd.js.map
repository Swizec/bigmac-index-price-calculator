{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["// January 2019 Big Mac Index\nconst BigMacIndex = require(\"./BigMacIndex.json\");\nconst fetch = require(\"isomorphic-fetch\");\n\nexport default class ParityPrice {\n    ipstack_key: string;\n    cache: { [key: string]: any };\n\n    constructor(ipstack_key: string) {\n        this.ipstack_key = ipstack_key;\n        this.cache = {};\n    }\n\n    private async ipstack(IP?: string) {\n        const param = IP ? IP : \"check\";\n\n        if (!this.cache[param]) {\n            const res = await fetch(\n                `http://api.ipstack.com/${param}?access_key=${this.ipstack_key}`\n            );\n            this.cache[param] = await res.json();\n        }\n\n        return this.cache[param];\n    }\n\n    private _price(USAprice: number, location: any): number {\n        const pricePerBurger = USAprice / BigMacIndex[\"United States\"];\n\n        let fairPrice = USAprice;\n\n        if (location.country_name in BigMacIndex) {\n            fairPrice = Math.round(\n                pricePerBurger * BigMacIndex[location.country_name]\n            );\n        } else if (location.continent_code === \"EU\") {\n            fairPrice = Math.round(pricePerBurger * BigMacIndex[\"Euro area\"]);\n        } else if (location.continent_code === \"AS\") {\n            fairPrice = Math.round(pricePerBurger * BigMacIndex[\"Vietnam\"]);\n        } else if (location.continent_code === \"AF\") {\n            fairPrice = Math.round(pricePerBurger * BigMacIndex[\"Egypt\"]);\n        } else if (location.continent_code === \"SA\") {\n            fairPrice = Math.round(pricePerBurger * BigMacIndex[\"Brazil\"]);\n        }\n\n        return fairPrice;\n    }\n\n    async price(USAprice: number, IP?: string): Promise<number> {\n        const location = await this.ipstack(IP);\n        const fairPrice = this._price(USAprice, location);\n\n        return fairPrice;\n    }\n\n    async priceWithLocation(\n        USAprice: number,\n        IP?: string\n    ): Promise<{ fairPrice: number; location: any }> {\n        const location = await this.ipstack(IP);\n\n        const fairPrice = this._price(USAprice, location);\n\n        return { fairPrice, location: location };\n    }\n}\n"],"names":["const","BigMacIndex","require","fetch","ParityPrice","constructor","ipstack_key","cache","ipstack","IP","this","_this","param","res","json","_price","USAprice","location","pricePerBurger","fairPrice","country_name","Math","round","continent_code","price","_this2","priceWithLocation","_this3"],"mappings":"yLACAA,IAAMC,EAAcC,QAAQ,sBACtBC,EAAQD,QAAQ,oBAEDE,EAIjBC,SAAYC,QACHA,YAAcA,OACdC,MAAQ,WAGHC,YAAAA,iBAAQC,aAGbC,yBAOEC,EAAKJ,MAAMK,OATZA,EAAQH,GAAU,yBAEnBE,EAAKJ,MAAMK,0BACMT,4BACYS,iBAAoBD,8BAD5CE,0BAGoBA,EAAIC,2BAAzBP,MAAMK,+EAMXG,YAAAA,gBAAOC,EAAkBC,OACvBC,EAAiBF,EAAWf,EAAY,iBAE1CkB,EAAYH,SAEZC,EAASG,gBAAgBnB,EACzBkB,EAAYE,KAAKC,MACbJ,EAAiBjB,EAAYgB,EAASG,eAEP,OAA5BH,EAASM,eAChBJ,EAAYE,KAAKC,MAAMJ,EAAiBjB,EAAY,cACjB,OAA5BgB,EAASM,eAChBJ,EAAYE,KAAKC,MAAMJ,EAAiBjB,EAAW,SAChB,OAA5BgB,EAASM,eAChBJ,EAAYE,KAAKC,MAAMJ,EAAiBjB,EAAW,OAChB,OAA5BgB,EAASM,iBAChBJ,EAAYE,KAAKC,MAAMJ,EAAiBjB,EAAW,SAGhDkB,GAGLK,YAAAA,eAAMR,EAAkBP,aACHC,4BAAAe,EAAKjB,QAAQC,kBAA9BQ,UACYQ,EAAKV,OAAOC,EAAUC,yCAKtCS,YAAAA,2BACFV,EACAP,aAEuBC,4BAAAiB,EAAKnB,QAAQC,kBAA9BQ,SAIC,WAFWU,EAAKZ,OAAOC,EAAUC,YAEVA"}